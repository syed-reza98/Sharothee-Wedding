name: Deploy Wedding Website

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  PHP_VERSION: '8.3'

jobs:
  # Frontend Build and Test
  frontend:
    name: Frontend (Next.js)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
        
    - name: Install dependencies
      working-directory: ./client
      run: npm ci
      
    - name: Run linting
      working-directory: ./client
      run: npm run lint
      
    - name: Run type checking
      working-directory: ./client
      run: npm run type-check
      
    - name: Run unit tests
      working-directory: ./client
      run: npm run test
      
    - name: Build application
      working-directory: ./client
      env:
        NEXT_PUBLIC_API_URL: ${{ github.ref == 'refs/heads/main' && secrets.NEXT_PUBLIC_API_URL_PROD || secrets.NEXT_PUBLIC_API_URL_DEV }}
        NODE_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: frontend-build
        path: client/.next
        retention-days: 1
        if-no-files-found: error

    - name: Upload static export for GitHub Pages
      uses: actions/upload-artifact@v4
      if: success() && github.ref == 'refs/heads/develop'
      with:
        name: github-pages-build
        path: client/out
        retention-days: 1

  # Backend Build and Test
  backend:
    name: Backend (Laravel)
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: wedding_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, dom, fileinfo, mysql, gd, zip, bcmath
        coverage: xdebug
        
    - name: Get Composer Cache Directory
      id: composer-cache
      working-directory: ./server
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      
    - name: Cache Composer dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('server/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-
        
    - name: Install Composer dependencies
      working-directory: ./server
      run: composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader
      
    - name: Setup Environment
      working-directory: ./server
      run: |
        cp .env.example .env
        php artisan key:generate
        
    - name: Configure Database
      working-directory: ./server
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: wedding_test
        DB_USERNAME: root
        DB_PASSWORD: root
      run: |
        php artisan migrate --force
        php artisan db:seed --force
        
    - name: Run tests with coverage
      working-directory: ./server
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: wedding_test
        DB_USERNAME: root
        DB_PASSWORD: root
      run: php artisan test --coverage --min=80

    - name: Upload backend artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: backend-build
        path: |
          server/vendor
          server/bootstrap/cache
          server/.env
        retention-days: 1

  # GitHub Pages Deployment (Development Phase)
  deploy-github-pages:
    name: Deploy to GitHub Pages (Development)
    needs: [frontend, backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    # Set permissions for GitHub Pages
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
        
    - name: Install dependencies
      working-directory: ./client
      run: npm ci
      
    - name: Build for GitHub Pages
      working-directory: ./client
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL_DEV || 'https://api.example.com' }}
        NODE_ENV: development
        NEXT_PUBLIC_GITHUB_PAGES: true
      run: |
        npm run build
        touch out/.nojekyll
        echo "Built for GitHub Pages deployment"
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: client/out
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # Development Backend API (Mock/Testing)
  deploy-dev-backend:
    name: Deploy Development Backend API
    needs: [backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, dom, fileinfo, sqlite3, gd, zip, bcmath
        
    - name: Install Composer dependencies
      working-directory: ./server
      run: composer install --no-dev --optimize-autoloader
      
    - name: Setup Environment for Development
      working-directory: ./server
      run: |
        cp .env.example .env
        php artisan key:generate
        sed -i 's/DB_CONNECTION=mysql/DB_CONNECTION=sqlite/' .env
        sed -i 's/DB_DATABASE=.*/DB_DATABASE=database\/database.sqlite/' .env
        touch database/database.sqlite
        
    - name: Run Migrations and Seeds
      working-directory: ./server
      run: |
        php artisan migrate --force
        php artisan db:seed --force
        
    - name: Create API Documentation
      working-directory: ./server
      run: |
        mkdir -p public/docs
        echo "# Wedding API Documentation" > public/docs/README.md
        echo "API endpoints available at development environment" >> public/docs/README.md
        php artisan route:list --json > public/docs/routes.json

  # Production Cloud Deployment
  deploy-production:
    name: Deploy to Production Cloud
    needs: [frontend, backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    # Deploy Frontend to Vercel
    - name: Deploy Frontend to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-args: '--prod'
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./client
        
    # Deploy Backend to Cloud Provider (configurable)
    - name: Deploy Backend to Production
      run: |
        echo "ðŸš€ Production Backend Deployment"
        echo "Configure for your hosting provider:"
        echo "- Google Cloud Run: gcloud run deploy"
        echo "- AWS Lambda: serverless deploy"
        echo "- Azure Container Apps: az containerapp up"
        echo "- Railway: railway up"
        echo "- DigitalOcean App Platform: doctl apps create"

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging Environment  
    needs: [frontend, backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy Frontend to Vercel (Preview)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./client
        
    - name: Deploy Backend to Staging
      run: |
        echo "ðŸ§ª Staging Backend Deployment"
        echo "Configure staging environment for testing"

  # Save Workflow Logs on Failure
  save-logs:
    name: Save Workflow Logs
    runs-on: ubuntu-latest
    if: failure()
    needs: [frontend, backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create logs directory
      run: mkdir -p logs/workflows
      
    - name: Save workflow logs
      run: |
        DATE=$(date +"%Y%m%d_%H%M%S")
        WORKFLOW_NAME="deploy_$(echo ${{ github.ref_name }} | sed 's/[^a-zA-Z0-9]/_/g')"
        LOG_FILE="logs/workflows/${WORKFLOW_NAME}_${DATE}_failure.log"
        
        echo "# Workflow Failure Log" > $LOG_FILE
        echo "Date: $(date)" >> $LOG_FILE
        echo "Branch: ${{ github.ref_name }}" >> $LOG_FILE
        echo "Commit: ${{ github.sha }}" >> $LOG_FILE
        echo "Workflow: ${{ github.workflow }}" >> $LOG_FILE
        echo "" >> $LOG_FILE
        echo "## Failure Details" >> $LOG_FILE
        echo "Check GitHub Actions logs for detailed error messages" >> $LOG_FILE
        
    - name: Commit and push logs
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add logs/workflows/
        git commit -m "Add workflow failure logs [skip ci]" || exit 0
        git push