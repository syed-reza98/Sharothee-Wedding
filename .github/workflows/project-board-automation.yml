name: 📋 Project Board Automation

on:
  issues:
    types: [opened, closed, reopened]
  issue_comment:
    types: [created]

permissions:
  issues: write
  contents: read
  repository-projects: write

jobs:
  move-to-boards:
    runs-on: ubuntu-latest
    steps:
      # Check for both 'opened' (issues event) and 'created' (issue_comment event) actions
      # to support issues created directly or via comments that create/tag issues
      - name: Add Bug Reports to Project Board
        if: success() && github.event.issue && contains(github.event.issue.title, '[BUG]') && (github.event.action == 'opened' || github.event.action == 'created')
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              // Get the project
              const projectQuery = `
                query($owner: String!) {
                  user(login: $owner) {
                    projectsV2(first: 20) {
                      nodes {
                        id
                        title
                        number
                      }
                    }
                  }
                }
              `;
              
              const projectResponse = await github.graphql(projectQuery, {
                owner: 'syed-reza98'
              });
              
              const project = projectResponse.user.projectsV2.nodes.find(p => 
                p.title === 'Sharothee Wedding Project Management' || p.number === 5
              );
              
              if (project) {
                // Add issue to project
                const addItemMutation = `
                  mutation($projectId: ID!, $contentId: ID!) {
                    addProjectV2ItemByContentId(input: {
                      projectId: $projectId
                      contentId: $contentId
                    }) {
                      item {
                        id
                      }
                    }
                  }
                `;
                
                await github.graphql(addItemMutation, {
                  projectId: project.id,
                  contentId: context.payload.issue.node_id
                });
                
                console.log(`Added bug report to project: ${project.title}`);
              }
              
              // Add informative comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '🐛 **Bug Report Received**\n\nThis bug has been automatically added to the [Sharothee Wedding Project Management](https://github.com/users/syed-reza98/projects/5) board for triage.\n\n**Next Steps:**\n1. Technical investigation\n2. Impact assessment\n3. Priority assignment\n4. Resolution planning\n\n*Automated by Sharothee Wedding Project Management System*'
              });
            } catch (error) {
              console.error('Error adding to project:', error);
              // Still add comment even if project addition fails
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '🐛 **Bug Report Received**\n\nThis bug has been logged for triage. Please check the [project board](https://github.com/users/syed-reza98/projects/5) for status updates.\n\n*Automated by Sharothee Wedding Project Management System*'
              });
            }

      - name: Add Feature Requests to Project Board
        if: success() && github.event.issue && contains(github.event.issue.title, '[FEATURE]') && (github.event.action == 'opened' || github.event.action == 'created')
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              // Get the project
              const projectQuery = `
                query($owner: String!) {
                  user(login: $owner) {
                    projectsV2(first: 20) {
                      nodes {
                        id
                        title
                        number
                      }
                    }
                  }
                }
              `;
              
              const projectResponse = await github.graphql(projectQuery, {
                owner: 'syed-reza98'
              });
              
              const project = projectResponse.user.projectsV2.nodes.find(p => 
                p.title === 'Sharothee Wedding Project Management' || p.number === 5
              );
              
              if (project) {
                // Add issue to project
                const addItemMutation = `
                  mutation($projectId: ID!, $contentId: ID!) {
                    addProjectV2ItemByContentId(input: {
                      projectId: $projectId
                      contentId: $contentId
                    }) {
                      item {
                        id
                      }
                    }
                  }
                `;
                
                await github.graphql(addItemMutation, {
                  projectId: project.id,
                  contentId: context.payload.issue.node_id
                });
                
                console.log(`Added feature request to project: ${project.title}`);
              }
              
              // Add informative comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '✨ **Feature Request Received**\n\nThis feature request has been automatically added to the [Sharothee Wedding Project Management](https://github.com/users/syed-reza98/projects/5) board for review.\n\n**Next Steps:**\n1. Requirements analysis\n2. Technical feasibility review\n3. Priority assessment\n4. Sprint planning consideration\n\n*Automated by Sharothee Wedding Project Management System*'
              });
            } catch (error) {
              console.error('Error adding to project:', error);
              // Still add comment even if project addition fails
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '✨ **Feature Request Received**\n\nThis feature request has been logged for review. Please check the [project board](https://github.com/users/syed-reza98/projects/5) for status updates.\n\n*Automated by Sharothee Wedding Project Management System*'
              });
            }

      - name: Add Deployment Tasks to Project Board
        if: success() && github.event.issue && contains(github.event.issue.title, '[DEPLOY]') && (github.event.action == 'opened' || github.event.action == 'created')
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              // Get the project
              const projectQuery = `
                query($owner: String!) {
                  user(login: $owner) {
                    projectsV2(first: 20) {
                      nodes {
                        id
                        title
                        number
                      }
                    }
                  }
                }
              `;
              
              const projectResponse = await github.graphql(projectQuery, {
                owner: 'syed-reza98'
              });
              
              const project = projectResponse.user.projectsV2.nodes.find(p => 
                p.title === 'Sharothee Wedding Project Management' || p.number === 5
              );
              
              if (project) {
                // Add issue to project
                const addItemMutation = `
                  mutation($projectId: ID!, $contentId: ID!) {
                    addProjectV2ItemByContentId(input: {
                      projectId: $projectId
                      contentId: $contentId
                    }) {
                      item {
                        id
                      }
                    }
                  }
                `;
                
                await github.graphql(addItemMutation, {
                  projectId: project.id,
                  contentId: context.payload.issue.node_id
                });
                
                console.log(`Added deployment task to project: ${project.title}`);
              }
              
              // Add informative comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '🚀 **Deployment Task Created**\n\nThis deployment task has been automatically added to the [Sharothee Wedding Project Management](https://github.com/users/syed-reza98/projects/5) board.\n\n**Pre-Deployment Checklist:**\n- [ ] Code review complete\n- [ ] Tests passing\n- [ ] Environment variables ready\n- [ ] Database backup created\n- [ ] Rollback plan confirmed\n\n*Automated by Sharothee Wedding Project Management System*'
              });
            } catch (error) {
              console.error('Error adding to project:', error);
              // Still add comment even if project addition fails
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '🚀 **Deployment Task Created**\n\nThis deployment task has been logged. Please check the [project board](https://github.com/users/syed-reza98/projects/5) for status updates.\n\n*Automated by Sharothee Wedding Project Management System*'
              });
            }

      # Only celebrate when issues are actually closed (not on issue_comment events)
      - name: Celebrate Issue Completion
        if: success() && github.event.issue && github.event.action == 'closed'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = context.payload.issue.title;
            let message = '🎉 **Issue Completed!**\n\n';
            
            if (title.includes('[BUG]')) {
              message += 'Bug has been resolved and verified. Thank you for reporting this issue!';
            } else if (title.includes('[FEATURE]')) {
              message += 'Feature has been implemented and deployed. Enjoy the new functionality!';
            } else if (title.includes('[DEPLOY]')) {
              message += 'Deployment completed successfully. All systems are operational!';
            } else {
              message += 'Task completed successfully!';
            }
            
            message += '\n\n*Completed via [Sharothee Wedding Project Management](https://github.com/users/syed-reza98/projects/5)*';
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            })
